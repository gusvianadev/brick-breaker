{"version":3,"sources":["Game/helpers/loadSprites.js","Game/helpers/checkSpriteIteration.js","Game/elements/Paddle/Paddle.js","Game/elements/Ball/Ball.js","Game/Game_controls.js","Game/Level/levels.js","Game/Level/helpers/loadBricks.js","Game/Level/elements/Brick/Brick.js","Game/Level/Level.js","Game/Game.js","index.js"],"names":["loadSprites","object","sprites","states","all","forEach","state","name","images","size","console","log","Object","values","src","newImg","Image","width","height","push","checkSpriteIteration","timestamp","imagesLength","current","length","animation","start","duration","currentSpriteIteration","Paddle","game","normal","currentSprite","position","x","y","borders","bottom","stats","movementSpeed","speed","direction","axis","value","checkSides","sides","left","right","top","center","ctx","save","drawImage","restore","checkPosition","draw","Ball","coordinate","i","collide","paddle","elements","betweenLeftAndRightSideOfPaddle","handleGameBordersCollision","handlePaddleCollision","changePosition","Controls","addEventListener","ev","key","move","stop","document","getElementById","newGame","levels","types","colors","layouts","buildLevels","layout","layoutI","level","row","rowI","brick","brickType","brickColor","type","color","loadBricks","normalBrickSize","bricksArr","bricks","entries","bricksObj","replace","img","Brick","id","sprite","ball","ballTop","ballRight","ballBottom","ballLeft","ballOffsetTop","ballOffsetRight","ballOffsetBottom","ballOffsetLeft","removeBrick","checkCollision","Level","currentLevel","display","bricksImages","normalBricks","brickPosition","brickId","brickSprites","filter","animate","Game","title","physics","gravity","htmlScreens","gameOver","controls","style","screen","levelUp","createLevel","el","CANVAS","getContext","GAME_WIDTH","GAME_HEIGHT","backgroundColor","BrickBreaker","animateGame","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.56948587.js","sourceRoot":"../src","sourcesContent":["const loadSprites = (object) => {\n\tconst sprites = {};\n\n\tobject.states.all.forEach((state) => {\n\t\tconst name = state.name;\n\t\tconst images = state.images;\n\t\tconst size = images.size;\n\t\tconsole.log(images);\n\n\t\tsprites[name] = [];\n\n\t\tObject.values(images.src).forEach((src) => {\n\t\t\tconst newImg = new Image();\n\t\t\tnewImg.src = src;\n\t\t\tnewImg.width = newImg.width * size;\n\t\t\tnewImg.height = newImg.height * size;\n\t\t\tsprites[name].push(newImg);\n\t\t});\n\t});\n\n\treturn sprites;\n};\n\nexport default loadSprites;\n","const checkSpriteIteration = (object, timestamp) => {\n\tconst imagesLength = object.sprites[object.states.current].length;\n\tconst passToNextImage =\n\t\ttimestamp - object.animation.start >=\n\t\tobject.animation.duration / imagesLength;\n\n\t// set the duration of the sprites's animation\n\tif (passToNextImage) {\n\t\tobject.animation.start = timestamp;\n\n\t\tif (object.animation.currentSpriteIteration < imagesLength - 1) {\n\t\t\tobject.animation.currentSpriteIteration++;\n\t\t} else {\n\t\t\tobject.animation.currentSpriteIteration = 0;\n\t\t}\n\t}\n};\n\nexport default checkSpriteIteration;\n","import normal from './assets/sprites/normal/*.png';\nimport loadSprites from '../../helpers/loadSprites';\nimport checkSpriteIteration from '../../helpers/checkSpriteIteration';\n\nclass Paddle {\n\tconstructor(game) {\n\t\tthis.game = game;\n\t\tthis.states = {\n\t\t\tall: [\n\t\t\t\t{\n\t\t\t\t\tname: 'normal',\n\t\t\t\t\timages: {\n\t\t\t\t\t\tsrc: normal,\n\t\t\t\t\t\tsize: 0.2,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tcurrent: 'normal',\n\t\t};\n\t\tthis.sprites = loadSprites(this);\n\t\tthis.animation = {\n\t\t\tstart: 0,\n\t\t\tduration: 300,\n\t\t\tcurrentSpriteIteration: 0,\n\t\t};\n\t\tconst currentSprite =\n\t\t\tthis.sprites[this.states.current][\n\t\t\t\tthis.animation.currentSpriteIteration\n\t\t\t];\n\t\tthis.size = {\n\t\t\twidth: currentSprite.width,\n\t\t\theight: currentSprite.height,\n\t\t};\n\t\tthis.position = {\n\t\t\tx: this.game.width / 2 - currentSprite.width / 2,\n\t\t\ty: this.game.borders.bottom - currentSprite.height - 20,\n\t\t};\n\t\tthis.stats = {\n\t\t\tmovementSpeed: 10,\n\t\t};\n\t\tthis.speed = 0;\n\t}\n\n\tmove(direction) {\n\t\tthis.speed = this.stats.movementSpeed * direction;\n\t}\n\n\tstop() {\n\t\tthis.speed = 0;\n\t}\n\n\tcollide(axis, value) {}\n\n\tcheckPosition() {\n\t\tthis.position.x += this.speed;\n\t\tthis.checkSides();\n\n\t\t// check game borders collision\n\t\t// left\n\t\tif (this.sides.left <= this.game.borders.left) {\n\t\t\tthis.position.x = this.game.borders.left;\n\t\t}\n\t\t// right\n\t\tif (this.sides.right >= this.game.borders.right) {\n\t\t\tthis.position.x = this.game.borders.right - this.size.width;\n\t\t}\n\n\t\tthis.checkSides();\n\t}\n\n\tcheckSides() {\n\t\tthis.sides = {\n\t\t\ttop: this.position.y,\n\t\t\tright: this.position.x + this.size.width,\n\t\t\tbottom: this.position.y + this.size.height,\n\t\t\tleft: this.position.x,\n\t\t};\n\t\tthis.center = this.sides.left + this.size.width / 2;\n\t}\n\n\tdraw(timestamp) {\n\t\tconst currentSprite =\n\t\t\tthis.sprites[this.states.current][\n\t\t\t\tthis.animation.currentSpriteIteration\n\t\t\t];\n\t\tconst ctx = this.game.ctx;\n\n\t\tctx.save();\n\t\tctx.drawImage(\n\t\t\tcurrentSprite,\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tthis.size.width,\n\t\t\tthis.size.height\n\t\t);\n\t\tctx.restore();\n\t\tcheckSpriteIteration(this, timestamp);\n\t}\n\n\tanimate(timestamp) {\n\t\tthis.checkPosition();\n\t\tthis.draw(timestamp);\n\t}\n}\n\nexport default Paddle;\n","import normal from './assets/sprites/normal/*.png';\nimport loadSprites from '../../helpers/loadSprites';\nimport checkSpriteIteration from '../../helpers/checkSpriteIteration';\n\nclass Ball {\n\tconstructor(game) {\n\t\tthis.game = game;\n\t\tthis.states = {\n\t\t\tall: [\n\t\t\t\t{\n\t\t\t\t\tname: 'normal',\n\t\t\t\t\timages: {\n\t\t\t\t\t\tsrc: normal,\n\t\t\t\t\t\tsize: 0.2,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tcurrent: 'normal',\n\t\t};\n\t\tthis.sprites = loadSprites(this);\n\t\tthis.animation = {\n\t\t\tstart: 0,\n\t\t\tduration: 2000,\n\t\t\tcurrentSpriteIteration: 0,\n\t\t};\n\t\tconst currentSprite =\n\t\t\tthis.sprites[this.states.current][\n\t\t\t\tthis.animation.currentSpriteIteration\n\t\t\t];\n\t\tthis.size = currentSprite.width;\n\t\tthis.position = {\n\t\t\tx: this.game.width / 2 - currentSprite.width / 2,\n\t\t\ty: this.game.borders.bottom - currentSprite.height - 100,\n\t\t};\n\t\tthis.speed = {\n\t\t\tx: 5,\n\t\t\ty: 5,\n\t\t};\n\t}\n\n\tcollide(axis, values) {\n\t\taxis.forEach((coordinate, i) => {\n\t\t\tthis.position[coordinate] = values[i];\n\t\t\tthis.speed[coordinate] *= -1;\n\t\t});\n\t\tthis.checkSides();\n\t}\n\n\thandleGameBordersCollision() {\n\t\t// left\n\t\tif (this.sides.left <= this.game.borders.left) {\n\t\t\tthis.collide(['x'], [this.game.borders.left]);\n\t\t}\n\t\t// right\n\t\tif (this.sides.right >= this.game.borders.right) {\n\t\t\tthis.collide(['x'], [this.game.borders.right - this.size]);\n\t\t}\n\t\t// top\n\t\tif (this.sides.top <= this.game.borders.top) {\n\t\t\tthis.collide(['y'], [this.game.borders.top]);\n\t\t}\n\t\t// bottom\n\t\tif (this.sides.bottom >= this.game.borders.bottom) {\n\t\t\tthis.collide(['y'], [this.game.borders.bottom - this.size]);\n\t\t}\n\n\t\tthis.checkSides();\n\t}\n\thandlePaddleCollision() {\n\t\tconst paddle = this.game.elements.paddle;\n\t\tconst betweenLeftAndRightSideOfPaddle =\n\t\t\tthis.sides.right >= paddle.sides.left &&\n\t\t\tthis.sides.left <= paddle.sides.right;\n\t\tif (\n\t\t\tthis.sides.bottom >= this.game.elements.paddle.sides.top &&\n\t\t\tbetweenLeftAndRightSideOfPaddle\n\t\t) {\n\t\t\tthis.collide(['y'], [paddle.sides.top - this.size]);\n\n\t\t\tif (\n\t\t\t\tthis.center.x >= this.game.elements.paddle.center &&\n\t\t\t\tthis.speed.x < 0\n\t\t\t) {\n\t\t\t\tthis.speed.x *= -1;\n\t\t\t} else if (\n\t\t\t\tthis.center.x <= this.game.elements.paddle.center &&\n\t\t\t\tthis.speed.x > 0\n\t\t\t) {\n\t\t\t\tthis.speed.x *= -1;\n\t\t\t}\n\t\t}\n\n\t\tthis.checkSides();\n\t}\n\n\tchangePosition() {\n\t\tthis.position.x += this.speed.x;\n\t\tthis.position.y += this.speed.y;\n\t\tthis.checkSides();\n\t\tthis.handleGameBordersCollision();\n\t\tthis.handlePaddleCollision();\n\t}\n\n\tcheckSides() {\n\t\tthis.sides = {\n\t\t\ttop: this.position.y,\n\t\t\tright: this.position.x + this.size,\n\t\t\tbottom: this.position.y + this.size,\n\t\t\tleft: this.position.x,\n\t\t};\n\t\tthis.center = {\n\t\t\tx: this.sides.left + this.size / 2,\n\t\t\ty: this.sides.top + this.size / 2,\n\t\t};\n\t}\n\n\tdraw(timestamp) {\n\t\tconst currentSprite =\n\t\t\tthis.sprites[this.states.current][\n\t\t\t\tthis.animation.currentSpriteIteration\n\t\t\t];\n\t\tconst ctx = this.game.ctx;\n\n\t\tctx.save();\n\t\tctx.drawImage(\n\t\t\tcurrentSprite,\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tthis.size,\n\t\t\tthis.size\n\t\t);\n\t\tctx.restore();\n\t\tcheckSpriteIteration(this, timestamp);\n\t}\n\n\tanimate(timestamp) {\n\t\tthis.changePosition();\n\t\tthis.draw(timestamp);\n\t}\n}\n\nexport default Ball;\n","class Controls {\n\tconstructor(game) {\n\t\taddEventListener('keydown', (ev) => {\n\t\t\tswitch (ev.key) {\n\t\t\t\tcase 'a':\n\t\t\t\tcase 'ArrowLeft':\n\t\t\t\t\tgame.elements.paddle.move(-1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'ArrowRight':\n\t\t\t\t\tgame.elements.paddle.move(1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\taddEventListener('keyup', (ev) => {\n\t\t\tswitch (ev.key) {\n\t\t\t\tcase 'a':\n\t\t\t\tcase 'ArrowLeft':\n\t\t\t\t\tgame.elements.paddle.speed < 0 &&\n\t\t\t\t\t\tgame.elements.paddle.stop();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'ArrowRight':\n\t\t\t\t\tgame.elements.paddle.speed > 0 &&\n\t\t\t\t\t\tgame.elements.paddle.stop();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tdocument.getElementById('btn-start').addEventListener('click', () => {\n\t\t\tgame.state = 'playing';\n\t\t\tgame.newGame();\n\t\t});\n\t\tdocument.getElementById('btn-restart').addEventListener('click', () => {\n\t\t\tgame.state = 'playing';\n\t\t\tgame.newGame();\n\t\t});\n\t}\n}\n\nexport default Controls;\n","const types = ['normal', 'big'];\nconst colors = [null, 'blue', 'brown', 'gray', 'green', 'light_blue'];\n\nconst layouts = [\n\t[\n\t\t['00', '01', '01', '00', '03', '03', '03', '00', '01', '01', '00'],\n\t\t['00', '01', '01', '00', '03', '03', '03', '00', '01', '01', '00'],\n\t\t['01', '01', '01', '02', '04', '04', '04', '02', '01', '01', '01'],\n\t\t['01', '01', '01', '02', '04', '04', '04', '02', '01', '01', '01'],\n\t\t['00', '01', '01', '00', '04', '04', '04', '00', '01', '01', '00'],\n\t\t['00', '01', '01', '00', '03', '03', '03', '00', '01', '01', '00'],\n\t],\n\t[\n\t\t['00', '01', '01', '00', '03', '03', '03', '00', '01', '01', '00'],\n\t\t['00', '01', '01', '00', '03', '03', '03', '00', '01', '01', '00'],\n\t\t['01', '01', '01', '02', '04', '04', '04', '02', '01', '01', '01'],\n\t\t['01', '01', '01', '02', '04', '04', '04', '02', '01', '01', '01'],\n\t\t['00', '01', '01', '00', '04', '04', '04', '00', '01', '01', '00'],\n\t\t['00', '01', '01', '00', '03', '03', '03', '00', '01', '01', '00'],\n\t],\n];\n\nconst levels = {};\n\nfunction buildLevels() {\n\tlayouts.forEach((layout, layoutI) => {\n\t\tconst level = layoutI + 1;\n\t\tlevels[level] = [];\n\n\t\tlayout.forEach((row, rowI) => {\n\t\t\tlevels[level][rowI] = [];\n\n\t\t\trow.forEach((brick) => {\n\t\t\t\tif (brick !== '00') {\n\t\t\t\t\tconst brickType = types[brick[0]];\n\t\t\t\t\tconst brickColor = colors[brick[1]];\n\n\t\t\t\t\tlevels[level][rowI].push({\n\t\t\t\t\t\ttype: brickType,\n\t\t\t\t\t\tcolor: brickColor,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlevels[level][rowI].push(null);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n\nbuildLevels();\n\nexport default levels;\n","const loadBricks = (normalBrickSize, bricksArr) => {\n\tconst bricks = {};\n\n\tbricksArr.forEach((brickType) => {\n\t\tObject.entries(brickType).forEach(([type, bricksObj]) => {\n\t\t\tbricks[type] = {};\n\n\t\t\tObject.entries(bricksObj).forEach(([name, src]) => {\n\t\t\t\tconst color = name\n\t\t\t\t\t.replace('_normal', '')\n\t\t\t\t\t.replace('_broken', '');\n\t\t\t\tconst state = name.replace(`${color}_`, '');\n\t\t\t\tconst img = new Image();\n\n\t\t\t\tif (state === 'broken') {\n\t\t\t\t\tbricks[type][color] = {};\n\t\t\t\t}\n\t\t\t\timg.src = src;\n\t\t\t\timg.width =\n\t\t\t\t\ttype === 'normal'\n\t\t\t\t\t\t? normalBrickSize.width\n\t\t\t\t\t\t: normalBrickSize.width * 2;\n\t\t\t\timg.height =\n\t\t\t\t\ttype === 'normal'\n\t\t\t\t\t\t? normalBrickSize.height\n\t\t\t\t\t\t: normalBrickSize.height * 2;\n\n\t\t\t\tbricks[type][color][state] = img;\n\t\t\t});\n\t\t});\n\t});\n\n\treturn bricks;\n};\n\nexport default loadBricks;\n","class Brick {\n\tconstructor(game, id, sprites, position) {\n\t\tthis.game = game;\n\t\tthis.id = id;\n\t\tthis.sprites = sprites;\n\t\tthis.position = {\n\t\t\tx: position.x,\n\t\t\ty: position.y,\n\t\t};\n\t\tthis.state = 'normal';\n\t\tconst sprite = this.sprites[this.state];\n\t\tthis.sides = {\n\t\t\ttop: this.position.y,\n\t\t\tright: this.position.x + sprite.width,\n\t\t\tbottom: this.position.y + sprite.height,\n\t\t\tleft: this.position.x,\n\t\t};\n\t}\n\n\tcheckCollision() {\n\t\tconst ball = this.game.elements.ball;\n\t\tconst ballTop = ball.sides.top;\n\t\tconst ballRight = ball.sides.right;\n\t\tconst ballBottom = ball.sides.bottom;\n\t\tconst ballLeft = ball.sides.left;\n\n\t\tif (\n\t\t\tballTop <= this.sides.bottom &&\n\t\t\tballRight >= this.sides.left &&\n\t\t\tballBottom >= this.sides.top &&\n\t\t\tballLeft <= this.sides.right\n\t\t) {\n\t\t\tconst ballOffsetTop = this.sides.top - ball.sides.top;\n\t\t\tconst ballOffsetRight = ball.sides.right - this.sides.right;\n\t\t\tconst ballOffsetBottom = ball.sides.bottom - this.sides.bottom;\n\t\t\tconst ballOffsetLeft = this.sides.left - ball.sides.left;\n\n\t\t\t// hit top\n\t\t\tif (\n\t\t\t\tballOffsetTop >= 0 &&\n\t\t\t\tballOffsetTop >= ballOffsetLeft &&\n\t\t\t\tballOffsetTop >= ballOffsetRight\n\t\t\t) {\n\t\t\t\tball.collide(['y'], [this.sides.top - ball.size]);\n\t\t\t}\n\n\t\t\t// hit right\n\t\t\telse if (\n\t\t\t\tballOffsetRight >= 0 &&\n\t\t\t\tballOffsetRight >= ballOffsetTop &&\n\t\t\t\tballOffsetRight >= ballOffsetBottom\n\t\t\t) {\n\t\t\t\tball.collide(['x'], [this.sides.right]);\n\t\t\t}\n\t\t\t// hit bottom\n\t\t\telse if (\n\t\t\t\tballOffsetBottom >= 0 &&\n\t\t\t\tballOffsetBottom >= ballOffsetLeft &&\n\t\t\t\tballOffsetBottom >= ballOffsetRight\n\t\t\t) {\n\t\t\t\tball.collide(['y'], [this.sides.bottom]);\n\t\t\t}\n\t\t\t// hit left\n\t\t\telse if (\n\t\t\t\tballOffsetLeft >= 0 &&\n\t\t\t\tballOffsetLeft >= ballOffsetTop &&\n\t\t\t\tballOffsetLeft >= ballOffsetBottom\n\t\t\t) {\n\t\t\t\tball.collide(['x'], [this.sides.left - ball.size]);\n\t\t\t}\n\n\t\t\tif (this.state === 'normal') {\n\t\t\t\tthis.state = 'broken';\n\t\t\t} else {\n\t\t\t\tthis.game.level.removeBrick(this.id);\n\t\t\t}\n\n\t\t\tball.checkSides();\n\t\t}\n\t}\n\n\tdraw() {\n\t\tconst ctx = this.game.ctx;\n\t\tconst sprite = this.sprites[this.state];\n\n\t\tctx.save();\n\t\tctx.drawImage(\n\t\t\tsprite,\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tsprite.width,\n\t\t\tsprite.height\n\t\t);\n\t\tctx.restore();\n\t}\n\n\tanimate() {\n\t\tthis.checkCollision();\n\t\tthis.draw();\n\t}\n}\n\nexport default Brick;\n","import levels from './levels';\nimport normalBricks from './assets/bricks/sprites/normal/*.png';\nimport loadBricks from './helpers/loadBricks';\nimport Brick from './elements/Brick/Brick';\n\nclass Level {\n\tconstructor(game) {\n\t\tthis.game = game;\n\t\tthis.currentLevel = 1;\n\t\tthis.display = levels[this.currentLevel];\n\t\tthis.normalBrickSize = {\n\t\t\twidth: game.width / 11,\n\t\t\theight: game.width / 11 / 2,\n\t\t};\n\t\tthis.bricksImages = loadBricks(this.normalBrickSize, [\n\t\t\t{ normal: normalBricks },\n\t\t]);\n\t\tthis.elements = {\n\t\t\tbricks: [],\n\t\t};\n\t}\n\n\tlevelUp() {\n\t\tthis.brickPosition = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t};\n\n\t\tlet brickId = 0;\n\t\tlevels[this.currentLevel].forEach((row) => {\n\t\t\trow.forEach((brick) => {\n\t\t\t\tif (brick) {\n\t\t\t\t\tconst brickSprites =\n\t\t\t\t\t\tthis.bricksImages[brick.type][brick.color];\n\t\t\t\t\tthis.elements.bricks.push(\n\t\t\t\t\t\tnew Brick(\n\t\t\t\t\t\t\tthis.game,\n\t\t\t\t\t\t\tbrickId,\n\t\t\t\t\t\t\tbrickSprites,\n\t\t\t\t\t\t\tthis.brickPosition\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbrickId++;\n\t\t\t\t}\n\t\t\t\tthis.brickPosition.x += this.normalBrickSize.width;\n\t\t\t});\n\t\t\tthis.brickPosition.x = 0;\n\t\t\tthis.brickPosition.y += this.normalBrickSize.height;\n\t\t});\n\t}\n\n\tremoveBrick(brickId) {\n\t\tthis.elements.bricks = this.elements.bricks.filter(\n\t\t\t(brick) => brick.id !== brickId\n\t\t);\n\t}\n\n\tdraw() {\n\t\tthis.elements.bricks.forEach((brick) => brick.animate());\n\t}\n\n\tanimate() {\n\t\tthis.draw();\n\t}\n}\n\nexport default Level;\n","import Paddle from './elements/Paddle/Paddle';\nimport Ball from './elements/Ball/Ball';\nimport Controls from './Game_controls.js';\nimport Level from './Level/Level';\n\nclass Game {\n\tconstructor(ctx, width, height) {\n\t\tthis.title = 'Brick Breaker';\n\t\tthis.ctx = ctx;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.borders = {\n\t\t\ttop: 0,\n\t\t\tright: this.width,\n\t\t\tbottom: this.height,\n\t\t\tleft: 0,\n\t\t};\n\t\tthis.physics = {\n\t\t\tgravity: 0.5,\n\t\t};\n\t\tthis.state = 'playing';\n\n\t\t// always put this last\n\t\tthis.htmlScreens = {\n\t\t\tnewGame: document.getElementById('new-game'),\n\t\t\tgameOver: document.getElementById('game-over'),\n\t\t};\n\t\tthis.controls = new Controls(this);\n\t}\n\n\tstart() {\n\t\tthis.level = new Level(this);\n\t\tthis.htmlScreens.newGame.style.display = 'flex';\n\t\tObject.entries(this.htmlScreens).forEach((screen) => {\n\t\t\tscreen[1].style.width = `${this.width}px`;\n\t\t\tscreen[1].style.height = `${this.height}px`;\n\t\t});\n\t\tthis.newGame();\n\t}\n\n\tcreateLevel() {\n\t\tthis.elements = {\n\t\t\tpaddle: new Paddle(this),\n\t\t\tball: new Ball(this),\n\t\t};\n\t\tthis.level.levelUp();\n\t}\n\n\tnewGame() {\n\t\tthis.createLevel();\n\t\tObject.entries(this.htmlScreens).forEach((screen) => {\n\t\t\tscreen[1].style.display = 'none';\n\t\t});\n\t\tthis.state = 'playing';\n\t}\n\n\tgameOver() {\n\t\tthis.htmlScreens.gameOver.style.display = 'flex';\n\t\tthis.state = 'game over';\n\t}\n\n\tanimate(timestamp) {\n\t\tif (this.state === 'playing') {\n\t\t\tObject.entries(this.elements).forEach((el) =>\n\t\t\t\tel[1].animate(timestamp)\n\t\t\t);\n\t\t\tthis.level.animate();\n\t\t}\n\t}\n}\n\nexport default Game;\n","import Game from './Game/Game.js';\n\nconst CANVAS = document.getElementById('canvas');\nconst ctx = CANVAS.getContext('2d');\n\nconst GAME_WIDTH = 800;\nconst GAME_HEIGHT = 600;\n\nCANVAS.width = GAME_WIDTH;\nCANVAS.height = GAME_HEIGHT;\nCANVAS.style.backgroundColor = '#FFFFFF';\n\nconst BrickBreaker = new Game(ctx, GAME_WIDTH, GAME_HEIGHT);\nBrickBreaker.start();\n\nconst animateGame = (timestamp) => {\n\tctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\tBrickBreaker.animate(timestamp);\n\trequestAnimationFrame(animateGame);\n};\n\nrequestAnimationFrame(animateGame);\n"]}